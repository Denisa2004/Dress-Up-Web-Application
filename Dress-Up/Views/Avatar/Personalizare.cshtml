@{
    ViewData["Title"] = "Personalizare Avatar";
    var avatarId = ViewBag.AvatarId;
    <link rel="stylesheet" href="~/css/personalizare.css" />

}

@if (TempData["Achievement"] != null)
{
    <div class="alert alert-success">
        @TempData["Achievement"]
    </div>
}

@if (TempData["message"] != null)
{
    <div class="alert alert-info">
        @TempData["message"]
    </div>
}


<h2>Personalizează-ți avatarul</h2>

<body>

    <div id="assistantBubble" style="
    position: fixed;
    bottom: 20px;
    left: 20px;
    background-color: #f7b1c1;
    width: 80px;
    height: 80px;
    border-radius: 50%;
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    cursor: pointer;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
">
    <img src="/images/asistent-icon.png" alt="Asistent" style="width: 50px; height: 50px;">
</div>

<!-- Norul de gandire -->
<div id="assistantTooltip" style="
    display: none;
    position: fixed;
    bottom: 110px;
    left: 20px;
    background-color: #f3e7fd;
    border-radius: 10px;
    padding: 10px 14px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    z-index: 9999;
    font-size: 14px;
    max-width: 200px;
">
    <div style="margin-bottom: 8px;">Ai nevoie de idei pentru un look reușit? Vorbește cu asistentul!</div>
    <div style="display: flex; gap: 5px; justify-content: flex-end;">
        <div style="width: 8px; height: 8px; background: #FF69B4; border-radius: 50%;"></div>
        <div style="width: 8px; height: 8px; background: #FF69B4; border-radius: 50%;"></div>
        <div style="width: 8px; height: 8px; background: #FF69B4; border-radius: 50%;"></div>
    </div>
</div>

<div id="assistantModal" style="
    display: none;
    position: fixed;
    bottom: 110px;
    left: 20px;
    width: 300px;
    background: #f3e7fd;
    border: 1px solid #ccc;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    padding: 15px;
    z-index: 10000;
">
    <h6>Asistent Virtual 💬 </h6>
    <textarea id="assistantInput" style="width: 100%; height: 60px;"></textarea>
    <button id="sendAssistantMessage" style="margin-top: 8px; padding: 8px 14px; background-color: #FF69B4; color: white; border: none; border-radius: 5px;">Trimite</button>
    <div id="assistantResponse" class="chat-log" style="margin-top: 10px; min-height: 50px;"></div>

</div>

@*<div id="assistantResponse" class="chat-log" style="margin-top: 10px; min-height: 200px; max-height: 300px; overflow-y: auto; background-color: #fff; border: 1px solid #000; padding: 8px; border-radius: 5px;"></div>*@

</body>



<div class="container">
    <!-- Avatar -->
    <div class="avatar-zone">
        <canvas id="avatarCanvas" width="400" height="650"></canvas>
        <div style="margin-top: 1rem;">
            @if (User.Identity.IsAuthenticated)
            {
                <button onclick="saveAvatar()">Salvează outfit</button>
            }
            <button onclick="resetAvatar()">Resetează avatarul</button>
        </div>
    </div>

    <!-- Dulap -->
    <div class="wardrobe-zone">
        <!-- Butoane cu iconite categorii -->
        <div class="category-icons">
            <img src="/images/icons/tops.png" onclick="loadCategory('tops')" title="TOPS">
            <img src="/images/icons/pants.png" onclick="loadCategory('pants')" title="PANTS">
            <img src="/images/icons/dresses.png" onclick="loadCategory('dresses')" title="DRESSES">
            <img src="/images/icons/shoes.png" onclick="loadCategory('shoes')" title="SHOES">
            <img src="/images/icons/accessories.png" onclick="loadCategory('accessories')" title="ACCESSORIES">
            <img src="/images/icons/hair.png" onclick="loadCategory('hair')" title="HAIR">
        </div>

        <!-- Haine -->
        <div class="clothes-display" id="wardrobe-items">
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const itemPositions = {
            "tops1": { x: 80, y: 145, w: 250, h: 220 },
            "tops2": { x: 112, y: 150, w: 180, h: 200 },
            "tops3": { x: 110, y: 142, w: 175, h: 210 },
            "tops4": { x: 110, y: 144, w: 177, h: 220 },

            "pants1": { x: 120, y: 290, w: 160, h: 320 },
            "pants2": { x: 120, y: 290, w: 160, h: 320 },
            "pants3": { x: 112, y: 265, w: 177, h: 320 },
            "pants4": { x: 90, y: 260, w: 220, h: 320 },

            "dresses1": { x: 90, y: 150, w: 220, h: 350 },
            "dresses2": { x: 80, y: 170, w: 240, h: 350 },
            "dresses3": { x: 60, y: 150, w: 290, h: 400 },
            "dresses4": { x: 7, y: 122, w: 390, h: 530 },

            "shoes1": { x: 150, y: 580, w: 106, h: 110 },
            "shoes2": { x: 150, y: 580, w: 100, h: 110 },
            "shoes3": { x: 150, y: 577, w: 103, h: 100 },
            "shoes4": { x: 150, y: 580, w: 103, h: 90 },

            "hair1": { x: 112, y: 22, w: 170, h: 235 },
            "hair2": { x: 136, y: 22, w: 125, h: 180 },
            "hair3": { x: 136, y: 27, w: 130, h: 145 },
            "hair4": { x: 133, y: 20, w: 135, h: 175 },

            "accessories1": { x: 230, y: 385, w: 80, h: 120 }, // geanta1
            "accessories2": { x: 230, y: 385, w: 80, h: 120 }, // geanta2
            "accessories3": { x: 195, y: 23, w: 50, h: 50 }, // fundita
            "accessories4": { x: 135, y: 15, w: 140, h: 70 }, // palarie
        };

        let layers = {
            base: { path: '@Url.Content($"~/images/base" + avatarId + ".png")', name: "base" },
            hair: null,
            tops: null,
            pants: null,
            dresses: null,
            shoes: null,
            accessories: null
        };

        const Categories = ['base','shoes', 'dresses', 'pants', 'tops', 'hair', 'accessories'];

        function drawAvatar() {
            const canvas = document.getElementById("avatarCanvas");
            const ctx = canvas.getContext("2d");
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            Categories.forEach(categ => {
                if (layers[categ] && layers[categ].path) {
                    const img = new Image();
                    img.src = layers[categ].path;
                    img.onload = () => {
                        const imageKey = layers[categ].name;
                        const pos = itemPositions[imageKey] || { x: 0, y: 0, w: 400, h: 650 };
                        ctx.drawImage(img, pos.x, pos.y, pos.w, pos.h);
                    };
                }
            });
        }

        function resetAvatar() {
            layers = {
                base: { path: '@Url.Content($"~/images/base" + avatarId + ".png")', name: "base" },
                hair: null,
                tops: null,
                pants: null,
                dresses: null,
                shoes: null,
                accessories: null
            };
            drawAvatar();
        }

        function updateLayer(categ, imagePath, imageName) {
            if (categ === "dresses") {
                layers["tops"] = null;
                layers["pants"] = null;
            }

            // top sau pants => scoate rochia
            if (categ === "tops" || categ === "pants") {
                layers["dresses"] = null;
            }

            if (categ === "shoes") {
                const index = imageName.replace("shoes", "");
                imagePath = `/images/shoes/${index}.png`;  
                imageName = `shoes${index}`;
            }

            layers[categ] = { path: imagePath, name: imageName };
            drawAvatar();
        }

        function loadCategory(category) {
            const folderPath = `/images/${category}/`;
            const imageCount = 4; 
            const wardrobe = document.getElementById("wardrobe-items");
            wardrobe.innerHTML = '';

            for (let i = 1; i <= imageCount; i++) {
                const imgPath = `${folderPath}${category}${i}.png`;

                const img = document.createElement("img");
                img.src = imgPath;
                img.alt = category + i;
                img.onclick = () => updateLayer(category, imgPath, category + i);
                wardrobe.appendChild(img);
            }
        }

        function saveAvatar() {
            const canvas = document.getElementById("avatarCanvas");
            const imageData = canvas.toDataURL("image/png");

            fetch('/Avatar/Save', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(imageData)
            })
                .then(response => response.json())
                .then(data => {
                    alert("Avatar salvat cu succes!");
                })
                .catch(error => {
                    console.error("Eroare:", error);
                });
        }

        window.onload = () => {
            resetAvatar();
        };


        // La hover pe bula roz → arata norul de gândire
        document.getElementById("assistantBubble").addEventListener("mouseenter", function () 
        {
            document.getElementById("assistantTooltip").style.display = "block";
        });

        // ascunde norul
        document.getElementById("assistantBubble").addEventListener("mouseleave", function () 
        {
            document.getElementById("assistantTooltip").style.display = "none";
        });

        // La click pe bula roz → toggle la fereastra de dialog
        document.getElementById("assistantBubble").addEventListener("click", function ()
        {
            const modal = document.getElementById("assistantModal");
                if (modal.style.display === "none" || modal.style.display === "") 
                    modal.style.display = "block";
                else 
                    modal.style.display = "none";
        });

        /*
        // Trimite mesaj si preia raspuns
        document.getElementById("sendAssistantMessage").addEventListener("click", function () {
            const message = document.getElementById("assistantInput").value;
            const responseContainer = document.getElementById("assistantResponse");

            if (!message.trim()) return;

             // Adaugă loader
             const loader = document.createElement("div");
            loader.className = "loader";
            loader.innerHTML = "<span></span><span></span><span></span>";
            responseContainer.appendChild(loader);

            // Resetare input
            document.getElementById("assistantInput").value = "";


            // Trimitere AJAX reală la controller
            fetch('/api/Chatbot/AskAssistant', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(message)
            })
            .then(response => response.text())
            .then(data => {
                // Șterge loaderul
                responseContainer.removeChild(loader);

                // Adauga răspunsul primit de la API
                const responseDiv = document.createElement("div");
                responseDiv.textContent = data;
                responseDiv.style.marginBottom = "8px";

                responseContainer.appendChild(responseDiv);
                responseContainer.scrollTop = responseContainer.scrollHeight;
            })

            .catch(error => {
                responseContainer.removeChild(loader);
                const errorDiv = document.createElement("div");
                errorDiv.textContent = "Eroare la asistent.";
                responseContainer.appendChild(errorDiv);
            });

        });*/

        document.getElementById("sendAssistantMessage").addEventListener("click", function () {
            const message = document.getElementById("assistantInput").value;
            const responseContainer = document.getElementById("assistantResponse");

            if (!message.trim()) return;

            // Adauga intrebarea utilizatorului in chat
            const userMessageDiv = document.createElement("div");
            userMessageDiv.className = "chat-message user-message";
            userMessageDiv.textContent = "👤 " + message;
            responseContainer.appendChild(userMessageDiv);

            // Adauga loader
            const loader = document.createElement("div");
            loader.className = "loader";
            loader.innerHTML = "<span></span><span></span><span></span>";
            responseContainer.appendChild(loader);

            // Reset input
            document.getElementById("assistantInput").value = "";

            // Trimitere AJAX la controller
            fetch('/api/Chatbot/AskAssistant', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(message)
            })
            .then(response => response.text())
            .then(data => {
                // sterge loaderul
                responseContainer.removeChild(loader);

                // Adauga raspunsul asistentului in chat
                const assistantMessageDiv = document.createElement("div");
                assistantMessageDiv.className = "chat-message assistant-message";
                assistantMessageDiv.textContent = "🤖 " + data;
                responseContainer.appendChild(assistantMessageDiv);

                // Scroll la ultimul mesaj
                responseContainer.scrollTop = responseContainer.scrollHeight;
            })
            .catch(error => {
                responseContainer.removeChild(loader);
                const errorDiv = document.createElement("div");
                errorDiv.className = "chat-message assistant-message";
                errorDiv.textContent = "Eroare la asistent.";
                responseContainer.appendChild(errorDiv);
            });
        });

        document.getElementById("assistantInput").addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                e.preventDefault(); // ← prevenire newline
                document.getElementById("sendAssistantMessage").click();
            }
        });

        // Adaugă umerașele plutitoare corect
        function createFloatingHangers(count = 10) {
            for (let i = 0; i < count; i++) {
                const hanger = document.createElement('div');
                hanger.classList.add('hanger');

                const startX = Math.random() * window.innerWidth;
                const delay = Math.random() * 20;

                hanger.style.left = `${startX}px`;
                hanger.style.animationDelay = `${delay}s`;
                hanger.style.animationDuration = `${10 + Math.random() * 10}s`;

                document.body.appendChild(hanger);
            }
        }

        // Asigură-te că funcția este apelată la încărcarea paginii
        window.addEventListener("DOMContentLoaded", () => {
            createFloatingHangers(15);
        });


        function createHanger() {
            const hanger = document.createElement('div');
            hanger.classList.add('hanger');
            hanger.style.left = Math.random() * window.innerWidth + 'px';
            hanger.style.top = Math.random() * window.innerHeight + 'px';
            document.body.appendChild(hanger);

            // Elimină după ce a ieșit de pe ecran
            setTimeout(() => hanger.remove(), 10000);
        }

        // Creează periodic câte un umeraș plutitor
        setInterval(createHanger, 1000);


    </script>
}